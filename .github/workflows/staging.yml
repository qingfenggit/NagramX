name: Staging build

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/staging.yml'
  workflow_dispatch:
    inputs:
      upload:
        description: 'Skip Upload: Set to "y" to skip uploading the build.'
        required: false

jobs:
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    outputs:
      build_timestamp: ${{ steps.staging_build_step.outputs.build_timestamp }}
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_HARDLINK: "true"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "10G"
      NATIVE_TARGET: "arm64-v8a"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          cache: 'gradle'
          distribution: 'temurin'
          java-version: '21'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Set up Ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          append-timestamp: false
      - name: Set up Android SDK Tools
        uses: android-actions/setup-android@v3
        with:
          packages: "build-tools;36.0.0 ndk;27.2.12479018 platforms;android-36"
      - name: Configure Android SDK Path
        run: |
          echo "sdk.dir=${ANDROID_HOME}" >> local.properties
      - name: Modify Gradle JVM Args
        run: |
          MEMORY_KB=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
          MEMORY_GB=$((MEMORY_KB / 1024 / 1024))
          echo "Detected memory size: ${MEMORY_GB}GB"
          if [ $MEMORY_GB -ge 12 ]; then
            sed -i '/^org\.gradle\.jvmargs=/d' gradle.properties
            echo "org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=2G -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> gradle.properties
          fi
          cat gradle.properties
      - name: Enable Optimization
        run: |
          sed -i 's/^-dontoptimize$/#-dontoptimize/' TMessagesProj/proguard-rules.pro
          echo "ProGuard optimization enabled for CI build"
          echo "Modified proguard-rules.pro:"
          grep -n "dontoptimize" TMessagesProj/proguard-rules.pro || echo "No dontoptimize rules found"
      - name: Staging Build
        id: staging_build_step
        env:
          COMMIT_ID: ${{ github.event.head_commit.id }}
        run: |
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          export BUILD_TIMESTAMP=$(date +%s)
          echo "build_timestamp=$BUILD_TIMESTAMP" >> "$GITHUB_OUTPUT"
          ./gradlew TMessagesProj:assembleStaging

          APK=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          echo "APK=$APK" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v4
        with:
          name: Staging
          path: ${{ env.APK }}
  upload:
    name: Upload staging
    if: github.event.inputs.upload != 'y' && !contains(github.event.head_commit.message, '[skip upload]')
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Send to Telegram
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_HASH: ${{ secrets.APP_HASH }}
          COMMIT_ID: ${{ github.event.head_commit.id }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          BUILD_TIMESTAMP: ${{ needs.build.outputs.build_timestamp }}
        run: |
          # send apk via telegram bot api
          export mini64=$(find artifacts -name "*arm64-v8a.apk")
          echo $mini64
          python -m pip install -r Tools/scripts/requirements.txt
          python Tools/scripts/upload.py ${{ secrets.HELPER_BOT_TOKEN }} ${{ secrets.HELPER_BOT_TARGET }} test ${{ secrets.HELPER_BOT_CANARY_TARGET }}
